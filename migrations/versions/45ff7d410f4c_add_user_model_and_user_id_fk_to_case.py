"""Add User model and user_id FK to Case

Revision ID: 45ff7d410f4c
Revises: 3ce9f24c3cf0
Create Date: 2025-04-23 13:44:44.488785

"""
from alembic import op
import sqlalchemy as sa
# Import password hasher
from werkzeug.security import generate_password_hash


# revision identifiers, used by Alembic.
revision = '45ff7d410f4c'
down_revision = '3ce9f24c3cf0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Create users table
    # Define the table structure first for bulk_insert
    users_table = op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=64), nullable=False),
        sa.Column('email', sa.String(length=120), nullable=True),
        sa.Column('password_hash', sa.String(length=256), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    # Add indexes using batch mode
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    # Step 1.5: Insert a default user (ID=1)
    # !!! IMPORTANT: CHANGE default username/email/password! !!!
    default_username = 'admin'
    default_email = 'oliverpizarro1@gmail.com' # Optional, can be None if nullable
    default_password = 'Sugar1314' # CHANGE THIS
    default_password_hash = generate_password_hash(default_password)

    op.bulk_insert(users_table,
        [
            {
                'id': 1, # Explicitly set ID to 1
                'username': default_username,
                'email': default_email,
                'password_hash': default_password_hash
            }
        ],
        multiinsert=False # Ensure single insert if needed, though bulk usually handles one row fine
    )
    print(f"Inserted default user '{default_username}' with ID=1.")


    # Step 2: Add user_id column to 'case' table, allowing NULLs initially
    with op.batch_alter_table('case', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=True))

    # Step 3: Update existing cases to use the default user_id (ID 1)
    # Use op.execute for the UPDATE statement
    try:
        # Use text() for safer SQL execution if needed, but simple update is often fine
        # from sqlalchemy.sql import text
        # op.execute(text('UPDATE "case" SET user_id = 1 WHERE user_id IS NULL'))
        op.execute('UPDATE "case" SET user_id = 1 WHERE user_id IS NULL')
        print("Updated existing cases to use default user_id=1 (if any).")
    except Exception as e:
        print(f"Could not update existing cases with default user ID: {e}")
        # Decide if this should halt the migration
        # raise e

    # Step 4 & 5: Alter column to NOT NULL and add Foreign Key constraint
    with op.batch_alter_table('case', schema=None) as batch_op:
        # Step 4: Alter the column to be NOT NULL
        batch_op.alter_column('user_id',
               existing_type=sa.Integer(),
               nullable=False) # Set nullable to False

        # Step 5: Create the foreign key constraint with the explicit name
        batch_op.create_foreign_key(
            batch_op.f('fk_cases_user_id_users'), # Constraint name using op.f()
            'users',                             # Remote table name ('users')
            ['user_id'],                         # Local column(s) in 'case' table
            ['id']                               # Remote column(s) in 'users' table
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Reverse the steps in opposite order where possible

    with op.batch_alter_table('case', schema=None) as batch_op:
        # Drop the foreign key first
        batch_op.drop_constraint(batch_op.f('fk_cases_user_id_users'), type_='foreignkey')
        # Drop the column (NOT NULL constraint is dropped with column)
        batch_op.drop_column('user_id')

    # Downgrade users table
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # NOTE: We don't typically script deleting the default user data in a downgrade.
    # ### end Alembic commands ###