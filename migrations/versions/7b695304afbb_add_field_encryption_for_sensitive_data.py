"""Add field encryption for sensitive data

Revision ID: 7b695304afbb
Revises: 779dd956a05a
Create Date: 2025-05-06 20:44:54.762141

"""
# Example migration file (your file will have a different name)
# migrations/versions/xxxxxxxxxxxx_add_field_encryption_for_sensitive_data.py

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from backend.utils.db_types import EncryptedString, EncryptedText, EncryptedJSON
from backend.utils.encryption import field_encryptor

# Import the Case model to access existing data
from backend.models import Case

def upgrade():
    # ### commands auto generated by Alembic - modify as needed ###
    
    # First, create temporary columns for encrypted data
    op.add_column('case', sa.Column('incident_description_encrypted', EncryptedText, nullable=True))
    op.add_column('case', sa.Column('vehicle_details_encrypted', EncryptedString(200), nullable=True))
    op.add_column('case', sa.Column('case_details_encrypted', EncryptedJSON, nullable=True))
    
    # Create a SQLAlchemy binding for data migration
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    
    # Get all existing cases
    cases = session.query(Case).all()
    
    # Migrate data from old columns to encrypted columns
    for case in cases:
        # The encryption happens automatically through the TypeDecorator
        case.incident_description_encrypted = case.incident_description
        case.vehicle_details_encrypted = case.vehicle_details
        case.case_details_encrypted = case.case_details
    
    # Commit the changes
    session.commit()
    
    # Drop the old columns
    op.drop_column('case', 'incident_description')
    op.drop_column('case', 'vehicle_details')
    op.drop_column('case', 'case_details')
    
    # Rename the encrypted columns to the original names
    op.alter_column('case', 'incident_description_encrypted', new_column_name='incident_description')
    op.alter_column('case', 'vehicle_details_encrypted', new_column_name='vehicle_details')
    op.alter_column('case', 'case_details_encrypted', new_column_name='case_details')
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - modify as needed ###
    # Add reverse migration code here if needed
    # Note: Decrypting data in a downgrade would be very difficult
    # It's usually better to create new non-encrypted columns and copy the decrypted data
    pass  # This line fixes the "expecting an indented block" error
    # ### end Alembic commands ###