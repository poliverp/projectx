// src/pages/CreateCasePage.jsx
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import api from '../../services/api';
import {
    Form,
    Input,
    Button,
    Typography,
    Alert,
    Space,
    Card
} from 'antd';
import { SaveOutlined, CloseCircleOutlined } from '@ant-design/icons';
import { caseFieldConfig } from '../../config/caseFieldConfig';

const { Title } = Typography;

function CreateCasePage() {
    const navigate = useNavigate();
    // Ant Design Form instance
    const [form] = Form.useForm();

    // State for loading and errors during submission - Keep these
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // --- Submission Handler (Remains largely the same) ---
    // 'onFinish' is called by Ant Design Form when validation passes
    const onFinish = async (values) => {
        setLoading(true);
        setError(null);

        console.log("Form values received:", values);

        // Construct Data Payload (keys should match backend expectations)
        // Use values directly from the form submission
        const caseData = {
            display_name: values.display_name?.trim() || '',
            official_case_name: values.official_case_name?.trim() || null,
            case_number: values.case_number?.trim() || null,
            judge: values.judge?.trim() || null,
            plaintiff: values.plaintiff?.trim() || null,
            defendant: values.defendant?.trim() || null,
            // Add any other fields dynamically generated by the form if needed
            // case_details: {} // Initialize if needed, or handle based on config
        };
        // Include other editable fields from the config if they were rendered
        caseFieldConfig.forEach(field => {
             if (field.isEditable && field.name in values && !(field.name in caseData)) {
                 // Add fields that were in the form but not explicitly listed above
                 // Apply similar trim/null logic
                 const value = values[field.name];
                 caseData[field.name] = (typeof value === 'string' ? value.trim() : value) || null;
             }
        });


        console.log("Submitting New Case Data:", caseData);

        try {
            // Call API
            const response = await api.createCase(caseData); // Assumes api.createCase exists
            console.log("Case created successfully:", response.data);

            // Handle Success
            const newCaseId = response.data?.id;
            if (newCaseId) {
                alert("Case created successfully!"); // Keep alert for now
                navigate(`/case/${newCaseId}`);
            } else {
                console.warn("New case ID not found in backend response, navigating to list.");
                alert("Case created successfully! (ID missing)");
                navigate('/manage-cases');
            }
        } catch (err) {
            // Handle Errors
            console.error("Error creating case:", err);
            const backendError = err.response?.data?.error || err.response?.data?.messages || 'An unknown error occurred.';
            let displayError = `Failed to create case: ${typeof backendError === 'object' ? JSON.stringify(backendError) : backendError}`;
            // Customize error for duplicates if status code is available
            if (err.response?.status === 409) {
                displayError = `Failed to create case: ${backendError}. Please use a unique Display Name or Case Number.`;
            }
            setError(displayError);
        } finally {
            setLoading(false);
        }
    };

    // Optional: Handle validation errors
    const onFinishFailed = (errorInfo) => {
        console.log('Form validation failed:', errorInfo);
        setError("Please fill in all required fields correctly.");
    };


    return (
        <Card title={<Title level={2} style={{ margin: 0 }}>Create New Case</Title>}>
            <Form
                form={form}
                layout="vertical"
                onFinish={onFinish}
                onFinishFailed={onFinishFailed}
                // Set initial values if needed, e.g., form.setFieldsValue({}) in useEffect
            >
                {/* Display general submission errors */}
                {error && (
                    <Alert
                        message="Error Creating Case"
                        description={error}
                        type="error"
                        showIcon
                        closable
                        onClose={() => setError(null)}
                        style={{ marginBottom: 24 }}
                    />
                )}

                {/* ---### START CHANGE: Dynamic Form Item Generation ###--- */}
                {caseFieldConfig
                  // Filter for fields that should appear on the create form
                  // Using isEditable for now, could add isCreatable later if needed
                  .filter(field => field.isEditable === true)
                  .map(field => (
                    <Form.Item
                      label={field.label}
                      key={field.name}
                      name={field.name} // AntD Form uses this name to manage state
                      // Use rules from config if defined, or set basic required rule
                      rules={[
                        {
                          required: field.isRequired,
                          message: `Please input ${field.label}!`,
                          // Add whitespace validation for required string fields
                          whitespace: field.isRequired && (typeof form.getFieldValue(field.name) === 'string' || !form.getFieldValue(field.name)), // Basic check
                        }
                        // Add other validation rules here if needed (e.g., type, pattern)
                      ]}
                    >
                      {/* Render different input types based on config later if needed */}
                      <Input
                        placeholder={field.placeholder}
                        disabled={loading}
                        // No value or onChange needed - AntD Form handles it via 'name'
                      />
                    </Form.Item>
                  ))
                }
                {/* ---### END CHANGE ###--- */}


                {/* Submission Buttons */}
                <Form.Item>
                    <Space>
                        <Button
                            type="primary"
                            htmlType="submit"
                            loading={loading}
                            icon={<SaveOutlined />}
                        >
                            Create Case
                        </Button>
                        <Button
                            icon={<CloseCircleOutlined />}
                            onClick={() => navigate('/manage-cases')}
                            disabled={loading}
                        >
                            Cancel
                        </Button>
                    </Space>
                </Form.Item>
            </Form>
        </Card>
    );
}

export default CreateCasePage;
